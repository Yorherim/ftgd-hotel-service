basePath: /api/v1
definitions:
  entity.User:
    properties:
      email:
        example: vasya@gmail.com
        type: string
      firstName:
        example: Vasya
        type: string
      id:
        example: 660c9b35208b7ec8f81791e6
        type: string
      lastName:
        example: Pupkin
        type: string
    type: object
  user.CreateUserDTO:
    properties:
      email:
        example: Vasya@gmail.com
        type: string
      firstName:
        example: Vasya
        type: string
      lastName:
        example: Pupkin
        type: string
      password:
        example: "123456"
        minLength: 6
        type: string
    required:
    - email
    - firstName
    - lastName
    - password
    type: object
  user.getUserByID200Example:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/entity.User'
      errors:
        items:
          type: string
        type: array
    type: object
  user.getUserByID400Example:
    properties:
      code:
        example: 400
        type: integer
      data:
        example: "null"
        type: string
        nullable: true
      errors:
        example:
        - invalid id
        items:
          type: string
        type: array
    type: object
  user.getUserByID404Example:
    properties:
      code:
        example: 404
        type: integer
      data:
        example: "null"
        type: string
        nullable: true
      errors:
        example:
        - user not found
        items:
          type: string
        type: array
    type: object
  user.getUsers200Example:
    properties:
      code:
        example: 200
        type: integer
      data:
        items:
          $ref: '#/definitions/entity.User'
        type: array
      errors:
        items:
          type: string
        type: array
    type: object
  user.serverError500Example:
    properties:
      code:
        example: 500
        type: integer
      data:
        example: "null"
        type: string
        nullable: true
      errors:
        example:
        - server error
        items:
          type: string
        type: array
    type: object
host: localhost:5000
info:
  contact:
    email: Yorherim@gmail.com
    name: Igor
  description: hotel service
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: hotel reservation
  version: "1.0"
paths:
  /users:
    get:
      consumes:
      - application/json
      description: get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.getUsers200Example'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/user.serverError500Example'
            - properties:
                data:
                  type: object
              type: object
      summary: get all users
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.getUserByID200Example'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/user.getUserByID400Example'
            - properties:
                data:
                  type: object
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/user.getUserByID404Example'
            - properties:
                data:
                  type: object
              type: object
      summary: get user by ID
      tags:
      - users
  /users/create:
    post:
      consumes:
      - application/json
      description: create user
      parameters:
      - description: create user fields
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.getUserByID200Example'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/user.getUserByID400Example'
            - properties:
                data:
                  type: object
              type: object
      summary: create user
      tags:
      - users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
